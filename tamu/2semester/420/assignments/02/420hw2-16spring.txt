(Print this page as a cover sheet for your printouts)

CSCE 420 HOMEWORK 2
Dr. Daugherity
Section: ______________ 
Due: 11:59 P.M. Wednesday, February 10, 2016

"On my honor, as an Aggie, I have neither given nor received any unauthorized 
aid on any portion of the academic work included in this assignment."


________________________________	________________________________
Typed or printed name of student	           Signature of student

NOTE:  Please follow your lab instructor's directions for submitting your 
assignment through CSNET.  ONLY ASSIGNMENTS SUBMITTED TO CSNET WILL BE GRADED!
Make a printout of each source file and staple it behind this cover sheet.
Sign it and turn it in in class Tuesday.  IF YOU DO NOT TURN IN A SIGNED COVER 
SHEET YOUR WORK WILL NOT BE GRADED!

NOTE:  Homework will be graded on build.tamu.edu using g++ 5.3.0 with
-std=c++14, python3, or javac and java.  You are free to develop your programs 
on any other platform, but it is your responsibility to make sure your programs 
also compile and execute correctly on build.tamu.edu using g++ -std=c++14, 
python3, or javac and java.

NOTE:  Each file submitted (hw2pr1.cpp, etc.--see below) must begin as follows:
//Your Name
//CSCE 420-xxx (fill in your section number)
//Due: February 10, 2016 (or whatever the due date is)
//hw2pr1.cpp (or whatever this file name is)

The grade for this lab will be based on style (formatting, variable names, 
comments, etc.), syntax (no compilation or link errors), and correctness 
(passes all test cases).  Your grade for this lab is:
Problem #	 1       2
Style             /3      /3
Syntax            /4      /4
Correctness       /8      /8
-------------------------------------------------------------------
Total             /15    /15
Grand total _____/30

1. (15 points)  Write a breadth-first search program to solve 8-puzzle problems
like that in Figure 3.4 on page 71.  Keep track of the number of nodes expanded
and print that out along with the steps to solve the problem.  A sample run 
should look something like this:

	Enter 8-puzzle starting state by rows (0 for blank): 7,2,4,5,0,6,8,3,1
	Enter ending state by rows (0 for blank): 5,7,4,8,2,6,0,3,1
	Solution: 
		Start	7 2 4
			5 0 6
			8 3 1
	Swap the blank
		Up	7 0 4
			5 2 6
			8 3 1

		Left	0 7 4
			5 2 6
			8 3 1

		Down	5 7 4
			0 2 6
			8 3 1

		Down	5 7 4
			8 2 6
			0 3 1
	Done!  Generated xx states.

Note: To keep the time and memory requirements reasonable, your program only 
needs to solve 8-puzzle problems which have a solution in 10 moves or less.
You may use Java or C++ or Python; name your program Hw2Pr1.java or hw2pr1.cpp
or hw2pr1.py, respectively.  

2. (15 points)  Modify problem 1 to use A* search with Manhattan distance for h;
e.g., the starting state on page 103 has a Manhattan distance of 18 from the
goal state (the sum of the number of rows and columns each tile must move from
its starting position to its ending position).  You should see a reduction in 
the number of states generated, especially for problems which require more
moves.  Name your program Hw2Pr2.java or hw2pr2.cpp or hw2pr2.py.
